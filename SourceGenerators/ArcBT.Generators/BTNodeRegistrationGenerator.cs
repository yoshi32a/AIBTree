using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace ArcBT.Generators
{
    [Generator]
    public class BTNodeRegistrationGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
            // デバッグ用
            // System.Diagnostics.Debugger.Launch();
            context.RegisterForSyntaxNotifications(() => new SyntaxReceiver());
        }

        public void Execute(GeneratorExecutionContext context)
        {
            if (!(context.SyntaxReceiver is SyntaxReceiver receiver))
                return;

            var compilation = context.Compilation;
            var btNodeAttributeSymbol = compilation.GetTypeByMetadataName("ArcBT.Core.BTNodeAttribute");
            var nodeTypeSymbol = compilation.GetTypeByMetadataName("ArcBT.Core.NodeType");

            if (btNodeAttributeSymbol == null || nodeTypeSymbol == null)
                return;

            // アセンブリごとにノードをグループ化
            var nodesByAssembly = new Dictionary<string, List<NodeInfo>>();

            foreach (var classDeclaration in receiver.CandidateClasses)
            {
                var model = compilation.GetSemanticModel(classDeclaration.SyntaxTree);
                var classSymbol = model.GetDeclaredSymbol(classDeclaration);

                if (classSymbol == null)
                    continue;

                // BTNodeAttribute を持つクラスを探す
                foreach (var attribute in classSymbol.GetAttributes())
                {
                    if (!SymbolEqualityComparer.Default.Equals(attribute.AttributeClass, btNodeAttributeSymbol))
                        continue;

                    // 属性の引数を取得
                    if (attribute.ConstructorArguments.Length >= 2)
                    {
                        var scriptName = attribute.ConstructorArguments[0].Value?.ToString();
                        var nodeTypeValue = attribute.ConstructorArguments[1].Value;
                        
                        if (scriptName == null || nodeTypeValue == null)
                            continue;

                        var nodeType = nodeTypeValue switch
                        {
                            0 => "Action",
                            1 => "Condition",
                            _ => null
                        };

                        if (nodeType == null)
                            continue;

                        // AssemblyName プロパティを取得（オプション）
                        // デフォルトは名前空間から推測
                        var defaultAssemblyName = GetAssemblyNameFromNamespace(classSymbol.ContainingNamespace?.ToDisplayString());
                        var assemblyName = defaultAssemblyName;
                        
                        foreach (var namedArg in attribute.NamedArguments)
                        {
                            if (namedArg.Key == "AssemblyName" && namedArg.Value.Value is string asmName)
                            {
                                assemblyName = asmName;
                            }
                        }

                        var nodeInfo = new NodeInfo
                        {
                            ClassName = classSymbol.Name,
                            FullTypeName = classSymbol.ToDisplayString(),
                            ScriptName = scriptName,
                            NodeType = nodeType,
                            Namespace = classSymbol.ContainingNamespace?.ToDisplayString() ?? "global"
                        };

                        if (!nodesByAssembly.ContainsKey(assemblyName))
                            nodesByAssembly[assemblyName] = new List<NodeInfo>();

                        nodesByAssembly[assemblyName].Add(nodeInfo);
                    }
                }
            }

            // アセンブリごとに登録コードを生成
            foreach (var kvp in nodesByAssembly)
            {
                var assemblyName = kvp.Key;
                var nodes = kvp.Value;
                
                if (nodes.Count == 0)
                    continue;

                var source = GenerateRegistrationCode(assemblyName, nodes);
                context.AddSource($"{assemblyName}.NodeRegistration.g.cs", SourceText.From(source, Encoding.UTF8));
            }
        }

        private string GenerateRegistrationCode(string assemblyName, List<NodeInfo> nodes)
        {
            var sb = new StringBuilder();
            
            // ヘッダー
            sb.AppendLine("// <auto-generated/>");
            sb.AppendLine("using System;");
            sb.AppendLine("using ArcBT.Core;");
            sb.AppendLine("using UnityEngine;");
            
            // 各ノードの名前空間を追加
            var namespaces = nodes.Select(n => n.Namespace).Distinct().Where(ns => ns != "global");
            foreach (var ns in namespaces)
            {
                sb.AppendLine($"using {ns};");
            }
            
            sb.AppendLine();
            sb.AppendLine($"namespace {assemblyName}.Generated");
            sb.AppendLine("{");
            sb.AppendLine("    /// <summary>");
            sb.AppendLine($"    /// {assemblyName} の BTNode 自動登録クラス");
            sb.AppendLine("    /// </summary>");
            sb.AppendLine("    [DefaultExecutionOrder(-1000)]");
            sb.AppendLine($"    public static class {assemblyName.Replace(".", "")}NodeRegistration");
            sb.AppendLine("    {");
            sb.AppendLine("        [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]");
            sb.AppendLine("        static void RegisterNodes()");
            sb.AppendLine("        {");
            
            // Action ノードの登録
            var actionNodes = nodes.Where(n => n.NodeType == "Action").OrderBy(n => n.ScriptName);
            if (actionNodes.Any())
            {
                sb.AppendLine("            // Action ノードの登録");
                foreach (var node in actionNodes)
                {
                    sb.AppendLine($"            BTStaticNodeRegistry.RegisterAction(\"{node.ScriptName}\", () => new {node.ClassName}());");
                }
                sb.AppendLine();
            }
            
            // Condition ノードの登録
            var conditionNodes = nodes.Where(n => n.NodeType == "Condition").OrderBy(n => n.ScriptName);
            if (conditionNodes.Any())
            {
                sb.AppendLine("            // Condition ノードの登録");
                foreach (var node in conditionNodes)
                {
                    sb.AppendLine($"            BTStaticNodeRegistry.RegisterCondition(\"{node.ScriptName}\", () => new {node.ClassName}());");
                }
                sb.AppendLine();
            }
            
            sb.AppendLine($"            BTLogger.LogSystem($\"{assemblyName} ノードを自動登録しました (Actions: {actionNodes.Count()}, Conditions: {conditionNodes.Count()})\");");
            sb.AppendLine("        }");
            sb.AppendLine("    }");
            sb.AppendLine("}");
            
            return sb.ToString();
        }

        private static string GetAssemblyNameFromNamespace(string namespaceName)
        {
            if (string.IsNullOrEmpty(namespaceName))
                return "ArcBT";

            // 名前空間のパターンに基づいてアセンブリ名を推測
            if (namespaceName.StartsWith("ArcBT.Samples.RPG"))
                return "ArcBT.Samples.RPG";
            else if (namespaceName.StartsWith("ArcBT.Samples"))
                return "ArcBT.Samples";
            else if (namespaceName.StartsWith("ArcBT"))
                return "ArcBT";
            else
                return "ArcBT"; // デフォルト
        }

        private class NodeInfo
        {
            public string ClassName { get; set; } = "";
            public string FullTypeName { get; set; } = "";
            public string ScriptName { get; set; } = "";
            public string NodeType { get; set; } = "";
            public string Namespace { get; set; } = "";
        }

        private class SyntaxReceiver : ISyntaxReceiver
        {
            public List<ClassDeclarationSyntax> CandidateClasses { get; } = new List<ClassDeclarationSyntax>();

            public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
            {
                // 属性を持つクラスを候補として収集
                if (syntaxNode is ClassDeclarationSyntax classDeclaration &&
                    classDeclaration.AttributeLists.Count > 0)
                {
                    CandidateClasses.Add(classDeclaration);
                }
            }
        }
    }
}